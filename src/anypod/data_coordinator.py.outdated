import datetime
import logging
import sqlite3
from typing import IO

from .db import DatabaseManager, Download, DownloadStatus
from .exceptions import (
    DatabaseOperationError,
    DataCoordinatorError,
    DownloadNotFoundError,
    FileOperationError,
)
from .file_manager import FileManager

logger = logging.getLogger(__name__)


class DataCoordinator:
    """Orchestrates operations between the DatabaseManager and FileManager.

    Handles the business logic involving both database records and
    filesystem files.
    """

    def __init__(self, db_manager: DatabaseManager, file_manager: FileManager):
        """Initializes the DataCoordinator.

        Args:
            db_manager: An instance of DatabaseManager.
            file_manager: An instance of FileManager.
        """
        self.db_manager = db_manager
        self.file_manager = file_manager
        logger.debug("DataCoordinator initialized.")

    def add_download(self, download_to_add: Download) -> None:
        """Adds or replaces a download.

        If a download with the same feed and id already exists, this method
        will first delete its associated downloaded file (if the status was DOWNLOADED),
        then delete the existing database record, before finally adding the new download's record.

        Args:
            download_to_add: The Download object representing the desired state.

        Raises:
            DatabaseOperationError: If a database operation fails.
            FileOperationError: If a file operation fails (e.g., expected file not found, or cannot delete).
        """
        logger.debug(
            "Attempting to add download.",
            extra={"feed_id": download_to_add.feed, "download_id": download_to_add.id},
        )
        try:
            existing_db_row = self.db_manager.get_download_by_id(
                download_to_add.feed, download_to_add.id
            )
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message="Error checking for existing download.",
                feed_id=download_to_add.feed,
                download_id=download_to_add.id,
            ) from e

        if existing_db_row and existing_db_row["status"] == str(
            DownloadStatus.DOWNLOADED
        ):
            logger.info(
                "Existing download found, preparing to replace.",
                extra={
                    "feed_id": download_to_add.feed,
                    "download_id": download_to_add.id,
                },
            )
            # Download exists, so we need to replace it.
            file_name_to_delete = f"{download_to_add.id}.{existing_db_row['ext']}"
            try:
                deleted = self.file_manager.delete_download_file(
                    feed=download_to_add.feed, file_name=file_name_to_delete
                )
            except FileOperationError as e:
                raise FileOperationError(
                    message="Error deleting file.",
                    feed_id=download_to_add.feed,
                    download_id=download_to_add.id,
                    file_name=file_name_to_delete,
                ) from e
            if deleted:
                logger.debug(
                    "Successfully deleted existing file for replacement.",
                    extra={
                        "feed_id": download_to_add.feed,
                        "download_id": download_to_add.id,
                        "file_name": file_name_to_delete,
                    },
                )
            else:
                logger.warning(
                    "Expected file for existing download not found on disk for deletion.",
                    extra={
                        "feed_id": download_to_add.feed,
                        "download_id": download_to_add.id,
                        "file_name": file_name_to_delete,
                    },
                )

        try:
            self.db_manager.upsert_download(download_to_add)
            logger.info(
                "Download record upserted successfully.",
                extra={
                    "feed_id": download_to_add.feed,
                    "download_id": download_to_add.id,
                    "status": download_to_add.status,
                },
            )
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message="Error adding or updating download record.",
                feed_id=download_to_add.feed,
                download_id=download_to_add.id,
            ) from e

    def update_status(
        self,
        feed: str,
        id: str,
        status: DownloadStatus,
        last_error: str | None = None,
    ) -> bool:
        """Updates the status of a download in the database. If the status changes from DOWNLOADED to any other state, this method will attempt to delete the associated media file.

        Args:
            feed: The feed name of the download.
            id: The ID of the download.
            status: The new DownloadStatus.
            last_error: An optional error message if the status is ERROR.

        Returns:
            True if a row was updated, False otherwise.

        Raises:
            DatabaseOperationError: If a database operation fails.
            FileOperationError: If an essential file operation fails (e.g., deleting an existing file).
            DownloadNotFoundError: If the download to update is not found in the database initially.
        """
        logger.debug(
            "Attempting to update download status.",
            extra={
                "feed_id": feed,
                "download_id": id,
                "new_status": status,
                "last_error": last_error,
            },
        )
        try:
            current_download_row = self.db_manager.get_download_by_id(feed, id)
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message=f"Error retrieving download for status update to {status}.",
                feed_id=feed,
                download_id=id,
            ) from e

        if not current_download_row:
            raise DownloadNotFoundError(
                message=f"Cannot update status to {status}: Download not found.",
                feed_id=feed,
                download_id=id,
            )

        current_status_str = current_download_row["status"]
        current_status_enum = (
            DownloadStatus(current_status_str) if current_status_str else None
        )

        # If status is changing FROM DOWNLOADED to something else, delete the file.
        if (
            current_status_enum == DownloadStatus.DOWNLOADED
            and status != DownloadStatus.DOWNLOADED
        ):
            current_ext = current_download_row["ext"]
            file_name_to_delete = f"{id}.{current_ext}"
            logger.info(
                "Status changing from DOWNLOADED, attempting to delete associated file.",
                extra={
                    "feed_id": feed,
                    "download_id": id,
                    "file_name": file_name_to_delete,
                    "new_status": status,
                },
            )
            try:
                deleted = self.file_manager.delete_download_file(
                    feed=feed, file_name=file_name_to_delete
                )
            except FileOperationError as e:
                raise FileOperationError(
                    message=f"Failed to delete file when changing status from {DownloadStatus.DOWNLOADED}.",
                    feed_id=feed,
                    download_id=id,
                    file_name=file_name_to_delete,
                ) from e
            if deleted:
                logger.debug(
                    "Successfully deleted file due to status change.",
                    extra={
                        "feed_id": feed,
                        "download_id": id,
                        "file_name": file_name_to_delete,
                    },
                )
            else:
                logger.warning(
                    "File not found on disk during status change from DOWNLOADED.",
                    extra={
                        "feed_id": feed,
                        "download_id": id,
                        "file_name": file_name_to_delete,
                    },
                )

        try:
            updated_in_db = self.db_manager.update_status(
                feed=feed, id=id, status=status, last_error=last_error
            )
            if updated_in_db:
                logger.info(
                    "Download status updated successfully in database.",
                    extra={
                        "feed_id": feed,
                        "download_id": id,
                        "new_status": status,
                        "previous_status": current_status_str,
                    },
                )
            else:
                logger.warning(
                    "Download status update in database reported no rows changed.",
                    extra={
                        "feed_id": feed,
                        "download_id": id,
                        "target_status": status,
                        "last_error": last_error,
                    },
                )
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message=f"Error updating status to {status} for download.",
                feed_id=feed,
                download_id=id,
            ) from e
        # If db_manager.update_status itself returns False after all the above checks,
        # it implies the download disappeared between the get and update, which is highly unlikely
        # but we return its result.
        return updated_in_db

    def get_download_by_id(self, feed: str, id: str) -> Download | None:
        """Retrieves a specific download by its feed and ID.

        Args:
            feed: The feed name of the download.
            id: The ID of the download.

        Returns:
            A Download object if found, otherwise None.

        Raises:
            DatabaseOperationError: If the database lookup fails.
        """
        logger.debug(
            "Attempting to get download by ID.",
            extra={"feed_id": feed, "download_id": id},
        )
        try:
            row = self.db_manager.get_download_by_id(feed, id)
            if row is None:
                logger.debug(
                    "Download not found by ID.",
                    extra={"feed_id": feed, "download_id": id},
                )
                return None
            return Download.from_row(row)
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message="Database lookup failed for download.",
                feed_id=feed,
                download_id=id,
            ) from e
        except ValueError as e:
            # Catch potential ValueError from Download.from_row if data is malformed
            # This indicates a data integrity issue rather than a direct DB operation failure.
            raise DataCoordinatorError(
                f"Data integrity issue for download {feed}/{id}: {e}"
            ) from e

    def stream_download_by_id(self, feed: str, id: str) -> IO[bytes] | None:
        """Retrieves a readable stream for a downloaded file.

        Checks if the download exists in the database and has a status of DOWNLOADED.
        If so, it requests the file stream from the FileManager.

        Args:
            feed: The feed name of the download.
            id: The ID of the download.

        Returns:
            A binary IO stream if the download is found, downloaded, and the file exists.
            None if the download record is not found or its status is not DOWNLOADED.

        Raises:
            DatabaseOperationError: If the database lookup fails.
            FileOperationError: If there's an issue retrieving the file stream from the FileManager.
            DataCoordinatorError: For data integrity issues (e.g. malformed DB data).
        """
        log_params = {"feed_id": feed, "download_id": id}
        logger.debug(
            "Attempting to stream download by ID.",
            extra=log_params,
        )
        download = self.get_download_by_id(feed, id)

        if download is None:
            logger.info(
                "Stream requested for non-existent or unparsable download record.",
                extra=log_params,
            )
            return None
        if download.status != DownloadStatus.DOWNLOADED:
            logger.info(
                "Stream requested for download not in DOWNLOADED status.",
                extra={**log_params, "status": download.status},
            )
            return None

        file_name = f"{download.id}.{download.ext}"
        log_params["file_name"] = file_name

        try:
            return self.file_manager.get_download_stream(feed, file_name)
        except FileNotFoundError as e:
            # DB says DOWNLOADED, but file is missing. Change the status to ERROR.
            error_msg = (
                f"File marked as {DownloadStatus.DOWNLOADED} but not found on disk"
            )
            logger.error(
                f"{error_msg} Attempting to update status to ERROR.",
                extra=log_params,
                exc_info=e,
            )
            # TODO: This should be done in a single transaction with the DB update.
            try:
                self.update_status(
                    feed=feed,
                    id=id,
                    status=DownloadStatus.ERROR,
                    last_error=f"{error_msg}: {file_name}.",
                )
            except (
                DatabaseOperationError,
                DownloadNotFoundError,
                FileOperationError,
            ) as e_update:
                logger.error(
                    "Failed to update status to ERROR after file not found.",
                    extra={**log_params, "original_error": e},
                    exc_info=e_update,
                )
            # Raise DataCoordinatorError wrapping the original FileOperationError
            raise DataCoordinatorError(f"{error_msg} Check logs for details.") from e

    def get_downloads_by_status(
        self,
        status_to_filter: DownloadStatus,
        feed: str | None = None,
        limit: int = 100,
        offset: int = 0,
    ) -> list[Download]:
        """Retrieves downloads with a specific status. Malformed records from the database will be logged and skipped.

        Args:
            status_to_filter: The DownloadStatus to filter by.
            feed: Optional feed name to filter by.
            limit: Maximum number of records to return.
            offset: Number of records to skip (for pagination).

        Returns:
            A list of Download objects matching the status and other criteria.

        Raises:
            DatabaseOperationError: If the database query fails.
        """
        logger.debug(
            "Attempting to get downloads by status.",
            extra={
                "status_filter": str(status_to_filter),
                "limit": limit,
                "offset": offset,
                "feed_id": feed or "<all>",
            },
        )

        downloads: list[Download] = []
        try:
            rows = self.db_manager.get_downloads_by_status(
                status_to_filter=status_to_filter,
                feed=feed,
                limit=limit,
                offset=offset,
            )
            for row in rows:
                try:
                    downloads.append(Download.from_row(row))
                except ValueError as e:
                    logger.error(
                        "Data integrity issue: Failed to parse download record from database during batch fetch; skipping this download.",
                        extra={
                            "feed_id": row["feed"],
                            "download_id": row["id"],
                            "status_filter": status_to_filter,
                        },
                        exc_info=e,
                    )
            logger.debug(
                f"Retrieved {len(downloads)} downloads by status.",
                extra={
                    "status_filter": str(status_to_filter),
                    "limit": limit,
                    "offset": offset,
                    "feed_id": feed or "<all>",
                },
            )
        except sqlite3.Error as e:
            raise DatabaseOperationError(
                message=f"Database query failed for downloads by status {status_to_filter}.",
                feed_id=feed,
                download_id=f"limit:{limit}_offset:{offset}",
            ) from e
        return downloads

    def prune_old_downloads(
        self,
        feed: str,
        keep_last: int | None,
        prune_before_date: datetime.datetime | None,
    ) -> tuple[list[str], list[str]]:
        """Prunes old downloads for a given feed based on retention rules. Malformed records identified as candidates will be logged and skipped for pruning.

        Deletion Logic:
        1. Identifies downloads to prune based on `keep_last` (number of latest downloads to keep).
        2. Identifies downloads to prune based on `prune_before_date` (downloads published before this date).
        3. The union of these two sets of downloads is considered for pruning.
        4. For each candidate download:
           a. If its status is DOWNLOADED, its associated file is deleted from the filesystem.
           b. The download record is updated to ARCHIVED status in the database.

        Args:
            feed: The name of the feed to prune.
            keep_last: If not None, keeps only this many of the most recent DOWNLOADED downloads.
                       Older DOWNLOADED downloads are candidates for pruning.
            prune_before_date: If not None, DOWNLOADED downloads published before this date are
                               candidates for pruning.

        Returns:
            A tuple (ids of downloads archived, ids of files deleted).

        Raises:
            DatabaseOperationError: If a database operation fails during candidate fetching or deletion.
            FileOperationError: If a file deletion operation fails critically for a specific download.
        """
        log_params = {
            "feed_id": feed,
            "keep_last": keep_last,
            "prune_before_date": (
                prune_before_date.isoformat() if prune_before_date else None
            ),
        }
        logger.info("Starting pruning process for feed.", extra=log_params)

        ids_of_downloads_archived: list[str] = []
        ids_of_files_deleted: list[str] = []
        # Use a set now that Download is hashable
        candidate_downloads_to_prune: set[Download] = set()

        # 1. Get candidates from keep_last rule
        if keep_last is not None and keep_last > 0:
            logger.debug(
                "Identifying prune candidates by keep_last rule.", extra=log_params
            )
            try:
                rows_for_keep_last = (
                    self.db_manager.get_downloads_to_prune_by_keep_last(feed, keep_last)
                )
            except sqlite3.Error as e:
                raise DatabaseOperationError(
                    message="Database error identifying downloads to prune by keep_last rule.",
                    feed_id=feed,
                    download_id=f"keep_last:{keep_last}",
                ) from e

            for row in rows_for_keep_last:
                try:
                    candidate_downloads_to_prune.add(Download.from_row(row))
                except ValueError as e:
                    logger.error(
                        "Data integrity issue: Failed to parse download record from keep_last candidates; skipping this download for pruning.",
                        extra={
                            "feed_id": feed,
                            "download_id": row["id"]  # noqa: SIM401 row is a Row, not dict
                            if "id" in row
                            else "unknown_id_keep_last",
                        },
                        exc_info=e,
                    )

        # 2. Get candidates from prune_before_date rule
        if prune_before_date is not None:
            logger.debug("Identifying prune candidates by date rule.", extra=log_params)
            try:
                rows_for_since = self.db_manager.get_downloads_to_prune_by_since(
                    feed, prune_before_date
                )
            except sqlite3.Error as e:
                raise DatabaseOperationError(
                    message="Database error identifying downloads to prune by date rule.",
                    feed_id=feed,
                    download_id=f"prune_before_date:{prune_before_date.isoformat()}",
                ) from e
            for row in rows_for_since:
                try:
                    candidate_downloads_to_prune.add(Download.from_row(row))
                except ValueError as e:
                    logger.error(
                        "Data integrity issue: Failed to parse download record from prune_before_date candidates; skipping this download for pruning.",
                        extra={
                            "feed_id": feed,
                            "download_id": row["id"]  # noqa: SIM401 row is a Row, not dict
                            if "id" in row
                            else "unknown_id_prune_date",
                        },
                        exc_info=e,
                    )

        if not candidate_downloads_to_prune:
            logger.info("No downloads found to prune for feed.", extra=log_params)
            return [], []

        logger.info(
            f"Identified {len(candidate_downloads_to_prune)} candidate(s) for pruning.",
            extra=log_params,
        )

        # 3. Process each candidate for deletion
        successfully_processed_ids_for_db_deletion: list[str] = []

        for download_to_prune in candidate_downloads_to_prune:
            download_prune_log_params = {
                "feed_id": feed,
                "download_id": download_to_prune.id,
                "download_status": download_to_prune.status,
            }

            if download_to_prune.status == DownloadStatus.DOWNLOADED:
                file_name_to_delete = f"{download_to_prune.id}.{download_to_prune.ext}"
                download_prune_log_params["file_name"] = file_name_to_delete
                logger.debug(
                    "Attempting to delete file for downloaded download being pruned.",
                    extra=download_prune_log_params,
                )
                try:
                    deleted_on_fs = self.file_manager.delete_download_file(
                        feed, file_name_to_delete
                    )
                    if deleted_on_fs:
                        logger.info(
                            "File deleted successfully during pruning.",
                            extra=download_prune_log_params,
                        )
                        ids_of_files_deleted.append(download_to_prune.id)
                    else:
                        logger.warning(
                            "File for download not found on disk during pruning. DB record will still be archived.",
                            extra=download_prune_log_params,
                        )
                except FileOperationError as e_fs:
                    raise FileOperationError(
                        message="Error deleting file during pruning. Download not modified.",
                        feed_id=feed,
                        download_id=download_to_prune.id,
                        file_name=file_name_to_delete,
                    ) from e_fs

            successfully_processed_ids_for_db_deletion.append(download_to_prune.id)

        # 4. Update status to ARCHIVED for successfully processed downloads
        if successfully_processed_ids_for_db_deletion:
            logger.debug(
                f"Attempting to archive {len(successfully_processed_ids_for_db_deletion)} download records.",
                extra={"feed_id": feed},
            )
        for id_to_archive in successfully_processed_ids_for_db_deletion:
            archive_log_params = {"feed_id": feed, "download_id": id_to_archive}
            try:
                updated_in_db = self.db_manager.update_status(
                    feed, id_to_archive, DownloadStatus.ARCHIVED
                )
            except sqlite3.Error as e:
                # This is an error during the DB update itself.
                raise DatabaseOperationError(
                    message="Database error updating status to ARCHIVED during pruning.",
                    feed_id=feed,
                    download_id=id_to_archive,
                ) from e
            if updated_in_db:
                logger.info(
                    "Download record archived successfully.",
                    extra=archive_log_params,
                )
                ids_of_downloads_archived.append(id_to_archive)
            else:
                logger.error(
                    "Failed to archive download record.",
                    extra=archive_log_params,
                )

        logger.info(
            "Pruning process completed for feed.",
            extra={
                **log_params,
                "downloads_archived_count": len(ids_of_downloads_archived),
                "files_deleted_count": len(ids_of_files_deleted),
            },
        )
        return ids_of_downloads_archived, ids_of_files_deleted

    # Placeholder for other methods from the task list:
    # def find_db_downloads_without_files(self, feed: str | None = None) -> list[Download]:
    # def find_files_without_db_downloads(self, feed: str | None = None) -> list[Path]:
