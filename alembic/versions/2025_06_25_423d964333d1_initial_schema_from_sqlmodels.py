# type: ignore
# ruff: noqa
# fmt: off

"""Initial schema from SQLModels

Revision ID: 423d964333d1
Revises:
Create Date: 2025-06-25 23:21:38.345482

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes

# Import custom types used in the migration
import anypod.db.types.timezone_aware_datetime
import anypod.db.types.feed


# revision identifiers, used by Alembic.
revision: str = '423d964333d1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feed',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), server_default='1', nullable=False),
    sa.Column('source_type', sa.Enum('CHANNEL', 'PLAYLIST', 'SINGLE_VIDEO', 'UNKNOWN', name='sourcetype'), nullable=False),
    sa.Column('source_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_successful_sync', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), server_default=sa.text("(datetime('now', 'utc'))"), nullable=False),
    sa.Column('created_at', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), server_default=sa.text("(datetime('now', 'utc'))"), nullable=False),
    sa.Column('updated_at', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), server_default=sa.text("(datetime('now', 'utc'))"), nullable=False),
    sa.Column('last_rss_generation', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), nullable=True),
    sa.Column('last_failed_sync', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), nullable=True),
    sa.Column('consecutive_failures', sa.Integer(), server_default='0', nullable=False),
    sa.Column('total_downloads', sa.Integer(), server_default='0', nullable=False),
    sa.Column('since', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), nullable=True),
    sa.Column('keep_last', sa.Integer(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subtitle', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('author', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category', anypod.db.types.feed.PodcastCategoriesType(), nullable=True),
    sa.Column('explicit', sa.Enum('YES', 'NO', 'CLEAN', name='podcastexplicit'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feed_is_enabled'), 'feed', ['is_enabled'], unique=False)
    op.create_table('download',
    sa.Column('feed_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('source_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('published', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), nullable=False),
    sa.Column('ext', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('filesize', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('UPCOMING', 'QUEUED', 'DOWNLOADED', 'ERROR', 'SKIPPED', 'ARCHIVED', name='downloadstatus'), nullable=False),
    sa.Column('discovered_at', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), server_default=sa.text("(datetime('now', 'utc'))"), nullable=False),
    sa.Column('updated_at', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), server_default=sa.text("(datetime('now', 'utc'))"), nullable=False),
    sa.Column('thumbnail', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('quality_info', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('retries', sa.Integer(), server_default='0', nullable=False),
    sa.Column('last_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('downloaded_at', anypod.db.types.timezone_aware_datetime.TimezoneAwareDatetime(), nullable=True),
    sa.ForeignKeyConstraint(['feed_id'], ['feed.id'], ),
    sa.PrimaryKeyConstraint('feed_id', 'id')
    )
    op.create_index('idx_feed_published', 'download', ['feed_id', 'published'], unique=False)
    op.create_index('idx_feed_status', 'download', ['feed_id', 'status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_feed_status', table_name='download')
    op.drop_index('idx_feed_published', table_name='download')
    op.drop_table('download')
    op.drop_index(op.f('ix_feed_is_enabled'), table_name='feed')
    op.drop_table('feed')
    # ### end Alembic commands ###
