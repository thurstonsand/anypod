---
description: Project-wide rules from top-level CLAUDE.md
globs: *
alwaysApply: true
---

# CLAUDE.md

## Project Overview

Anypod converts yt-dlp-supported sources (YouTube channels, playlists) into RSS podcast feeds. It runs as a long-lived service that periodically fetches metadata, downloads media files, and generates podcast-consumable RSS feeds.

see @DESIGN_DOC.md for in depth design doc.

## Commands

### Development Commands
```bash
# Install dependencies and setup
uv sync

# Run application
uv run anypod --config-file example_feeds.yaml

# Debug modes for testing components
DEBUG_MODE=ytdlp uv run anypod --config-file debug.yaml               # Test yt-dlp operations
DEBUG_MODE=enqueuer uv run anypod --config-file example_feeds.yaml    # Test metadata fetching
DEBUG_MODE=downloader uv run anypod --config-file example_feeds.yaml  # Test download operations

# Linting and type checking
uv run ruff check                               # Lint code
uv run ruff format                              # Format code
uv run pyright                                  # Type checking
uv run pre-commit run --all-files               # All of the above, prefer to use this one when confirming your code is good

# tool use
uvx yt-dlp # can research/view real data from youtube videos for research. see @example_feeds.yaml for real links
```

#### Serena MCP

Serena is capable of searching and updating code by symbol, relying on lsp to accurately and comprehensively find all references. Use it in conjunction with your other tools to make changes to the codebase. particularly rely on Serena for:

- Gather information about a file/class: `get_symbol_overview` in conjunction with `find_symbol` to quickly and efficiently gather information an overview.
- Refactoring code: as it is able to efficiently find all references of a symbol (`find_referencing_symbols`) or modifying symbols (`replace_symbol_body`)
  - When using `replace_symbol_body`, Serena will handle indentation/whitespace to the correct level for that symbol. That is, you do not need to prepend whitespace outside the context of what would be syntactically correct for the code you are inserting.
- Any other symbol-level operation can benefit from utilizing Serena over other options like pattern/regex/sed/etc.

## Architecture

### Core Components
- **Configuration** (`config/`): Pydantic-based multi-source config (env vars → CLI → YAML)
- **Database** (`db/`): SQLite with sqlite-utils wrapper `SqliteUtilsCore`, manages download state machine
- **Data Coordinator** (`data_coordinator/`): Orchestrates the download lifecycle
  - Enqueuer: Fetches metadata, identifies new items
  - Downloader: Downloads media files, manages success/failure
  - Pruner: Implements retention policies, archives old items
- **yt-dlp Wrapper** (`ytdlp_wrapper/`): Handler-based system for different sources
- **File Manager**: Abstracts filesystem operations for future cloud storage
- **RSS Generation** (`rss/`): feedgen-based RSS feed creation

### Database Schema
Single `downloads` table with status lifecycle: `UPCOMING → QUEUED → DOWNLOADED/ERROR → ARCHIVED`
- Composite primary key: `(feed, id)`
- Critical indexes: `idx_feed_status`, `idx_feed_published`

### State Management
Download status transitions are implemented as explicit methods, not generic updates. Always use proper state transition methods in `db/db.py`.

## Development Notes

### Requirements
- Python 3.13+ (uses modern match/case syntax)
- Package manager: `uv` (not pip/poetry) - use modern `uv add`, `uv sync` commands, not legacy `uv pip`

### Code Patterns
- Error handling: Structured exceptions with context (e.g. feed_id, download_id)
- Logging: Structured JSON logging with proper context propagation
- Database: Uses sqlite-utils wrapped in `SqliteUtilsCore` class, not raw SQLite
- Currently synchronous but designed for future async conversion

### Tool Configuration
- Linting and formatting: see @.ruff.toml for ruff configuration
- Type checking: see @pyrightconfig.json for pyright configuration
- Testing: pytest configuration in @pyproject.toml

## File Structure

Whenever you add a new file, or notice a file that is missing from this list, proactively document it here.

```
anypod/
├── src/anypod/
│   ├── __init__.py
│   ├── __main__.py              # Entry point
│   ├── cli/                     # CLI interface and debug modes
│   │   ├── cli.py               # Main CLI handler
│   │   ├── default.py           # Default CLI mode
│   │   ├── debug_downloader.py  # Debug mode for download testing
│   │   ├── debug_enqueuer.py    # Debug mode for metadata fetching
│   │   └── debug_ytdlp.py       # Debug mode for yt-dlp testing
│   ├── config/                  # Configuration management
│   │   ├── config.py            # Main config loader
│   │   ├── feed_config.py       # Feed-specific configuration
│   │   └── types/               # Config type definitions
│   │       ├── feed_metadata_overrides.py
│   │       ├── podcast_categories.py
│   │       └── podcast_explicit.py
│   ├── data_coordinator/        # Core orchestration logic
│   │   ├── coordinator.py       # Main coordinator
│   │   ├── downloader.py        # Download logic
│   │   ├── enqueuer.py          # Metadata fetch & enqueue
│   │   ├── pruner.py            # Retention policy implementation
│   │   └── types/               # Coordinator types
│   │       ├── phase_result.py
│   │       └── processing_results.py
│   ├── db/                      # Database layer
│   │   ├── base_db.py           # Shared database components
│   │   ├── download_db.py       # Download-specific operations
│   │   ├── feed_db.py           # Feed-specific operations
│   │   ├── sqlite_utils_core.py # SQLite-Utils wrapper
│   │   └── types/               # Database types
│   │       ├── download.py
│   │       ├── download_status.py
│   │       ├── feed.py
│   │       └── source_type.py
│   ├── rss/                     # RSS feed generation
│   │   ├── feedgen_core.py      # Feed generation logic
│   │   └── rss_feed.py          # `feedgen` wrapper
│   ├── schedule/                # Scheduled feed processing
│   │   ├── apscheduler_core.py  # Type-safe APScheduler wrapper
│   │   └── scheduler.py         # Main feed scheduler using APScheduler
│   ├── ytdlp_wrapper/           # `yt-dlp` integration
│   │   ├── base_handler.py      # Base handler interface for different source types
│   │   ├── youtube_handler.py   # YouTube source handler
│   │   ├── ytdlp_core.py        # `yt-dlp` wrapper
│   │   └── ytdlp_wrapper.py     # High-level wrapper
│   ├── exceptions.py            # Custom exceptions
│   ├── file_manager.py          # File operations abstraction
│   ├── logging_config.py        # Logging configuration
│   ├── path_manager.py          # Path resolution logic
│   └── state_reconciler.py      # State reconciliation between config and database
├── pyproject.toml               # Package configuration
├── uv.lock                      # Dependency lock file
├── example_feeds.yaml           # Example configuration
├── DESIGN_DOC.md                # High level design of system
├── TASK_LIST.md                 # Work items to build the full system
└── README.md                    # Public documentation
```

### Configuration Example

Full YAML file describing podcasts:

```yaml
feeds:
  channel:
    url: https://www.youtube.com/@example
    yt_args: "-f worst[ext=mp4] --playlist-items 1-3"
    schedule: "0 3 * * *"
    since: "2022-01-01T00:00:00Z"

  # Feed with full metadata overrides
  premium_podcast:
    url: https://www.youtube.com/@premium/videos
    schedule: "0 6 * * *"
    metadata:
      title: "My Premium Podcast"                     # Override feed title
      subtitle: "Daily insights and discussions"       # Feed subtitle
      description: "A daily podcast about technology and culture" # Feed description
      language: "en"                                  # Language code (e.g., 'en', 'es', 'fr')
      author: "John Doe"                             # Podcast author
      image_url: "https://example.com/podcast-art.jpg" # Podcast artwork (min 1400x1400px)
      explicit: "no"                                 # Explicit content: "yes", "no", or "clean"
      categories:                                    # Apple Podcasts categories (max 2)
        - "Technology"                               # Main category only
        - "Business > Entrepreneurship"              # Main > Sub category
        # Alternative formats:
        # - {"main": "Technology"}
        # - {"main": "Business", "sub": "Entrepreneurship"}
        # Or as comma-separated string: "Technology, Business > Entrepreneurship"
```

#### Environment Variables
Configure global application settings via environment variables:
```bash
DEBUG_MODE=enqueuer                    # Debug mode: ytdlp, enqueuer, downloader
LOG_FORMAT=json                        # Log format: human, json (default: human)
LOG_LEVEL=DEBUG                        # Log level: DEBUG, INFO, WARNING, ERROR (default: INFO)
LOG_INCLUDE_STACKTRACE=true           # Include stack traces in logs (default: false)
BASE_URL=https://podcasts.example.com  # Base URL for feeds/media (default: http://localhost:8024)
DATA_DIR=/path/to/data                # Root directory for all application data (default: /data)
CONFIG_FILE=/path/to/feeds.yaml       # Config file path (default: /config/feeds.yaml)
COOKIE_PATH=/path/to/cookies.txt      # Optional cookies.txt file for yt-dlp authentication
```

## Code Style Guidelines

### General Principles
- **Follow existing codebase style above all else**
- **Following style applies even when editing non-code as well. In all scenarios, follow existing style**
- Focus on requested functionality - avoid unnecessary refactoring of existing code
- Use type hints consistently with `<type> | None` over `Optional[<type>]`
- Keep functions under 50 lines and focused on single responsibilities
- Scope `try` blocks tightly around specific statements that may raise exceptions
- Bias towards wrapping and re-raising exceptions to the highest possible location
- Exception messages should not include variable data - use existing exception parameters/attributes instead
- When catching and re-raising exceptions, use `raise ... from e` syntax to preserve stack traces
- Catch specific exceptions rather than broad `Exception` catches
- When adding new code/features, don't reference them with "new logic", "new field", etc. It is going to live in the code base for a long time past "new"
- Order functions so each is defined before being referenced within the same file

### Docstring Guidelines
- All functions, methods, classes, and tops of files require Google-style docstrings:

```python
def fetch_metadata(
    feed_id: str,
    url: str,
    yt_cli_args: list[str] | None = None,
) -> list[Download]:
    """Return metadata for *url* using **yt‑dlp**.

    Args:
        feed_id: Unique identifier of the parent feed.
        url: Media or playlist URL to inspect.
        yt_cli_args: Extra flags forwarded verbatim to ``yt‑dlp``.

    Returns:
        List of populated :class:`Download` instances.

    Raises:
        YtdlpApiError: When no extractable media is found.
    """
```

- When writing docstrings, never write one for __init__ fns, since this should be covered by the class level docstring