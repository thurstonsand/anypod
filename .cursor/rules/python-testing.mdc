---
description:
globs: tests/**/*.py
alwaysApply: false
---
# Python Testing Best Practices

## Test Structure
- Place tests in a `tests/` directory parallel to `src/`
  - integration tests go in `tests/integration` and should be prepended with `integration_test_`
- reference packages in src directly; do not prepend a `src.<package>`, just `<package>`
- Mirror the package structure in tests
- Use clear test names that describe behavior
- Group related tests in classes
- Keep test files focused and manageable

## Test Organization
```
# Example test structure
tests/
├── conftest.py           # shared fixtures
├── unit/                 # unit tests
│   └── test_module.py
├── integration/          # integration tests
│   └── integration_test_functionality.py
└── e2e/                  # end-to-end tests
    └── test_e2e.py
```

## Writing Tests
- Use descriptive test names
- Follow Arrange-Act-Assert pattern but don't leave comments saying that you are
- One assertion per test when possible
- Test both success and failure paths
- Keep tests independent
- Avoid test interdependence
- If an assert is non-obvious, add a descriptive message to make failures clear
- Calling a private method from a test will cause the type checker to complain about protected access; silence with `# type: ignore`
- If you encounter linter issues, take one or two tries to address, but then move on; as long as the tests execute, that is more important

## Fixtures
- Use fixtures for setup/teardown
- Share fixtures in `conftest.py`
- Scope fixtures appropriately
- Use factory fixtures for flexibility
- Clean up resources properly
- Document fixture purposes

## Mocking
- Mock at the right level
- Use `pytest-mock`
- Verify mock calls when behavior matters
- Don't mock what you don't own
- Reset mocks between tests
- Use spy objects when appropriate

## Test Coverage
- **IMPORTANT**: Aim for meaningful coverage
- Use branch coverage
- Exclude appropriate paths
- **IMPORTANT**: Don't chase 100% blindly
- Document coverage decisions
- Review uncovered sections

## Async Testing
- Use `pytest-asyncio`
- Mark async tests appropriately
- Handle coroutines correctly
- Test timeouts and cancellation
- Mock async dependencies properly
- Use appropriate async fixtures

## Performance
- Keep tests fast
- Use appropriate test scopes
- Parallelize with `pytest-xdist`
- Profile slow tests
- Cache expensive operations
- Use test categories

## Best Practices
- Write tests before fixing bugs
- Test public interfaces primarily
- Keep tests readable
- Don't test implementation details
- Use appropriate assertions
- Document test requirements
- Annotate all tests with a pytest marker for either "Unit" or "Integration"
- Execute tests with `uv run pytest`

## Test Data
- Use factories for test data
- Keep test data minimal
- Use realistic data shapes
- Avoid hard-coded values
- Version control test data
- Clean up test data

## Continuous Integration
- Run tests in CI
- Use matrix testing
- Test multiple Python versions
- Enforce coverage thresholds
- Report test results clearly
- Cache test dependencies
